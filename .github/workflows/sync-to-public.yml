name: Sync to Public Mirror

on:
  push:
    branches: 
      - '**'  # Trigger on pushes to any branch
  pull_request:
    types: [closed]  # Trigger when PRs are merged or closed
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync all branches'
        required: false
        default: 'true'
        type: boolean
      public_repo_name:
        description: 'Public repository name (leave empty to auto-derive by removing "-private")'
        required: false
        type: string

jobs:
  sync-to-public:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out private repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # We need all branches
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}
          
      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
      - name: Set Git identity
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
      - name: Determine repository names
        id: repo-names
        run: |
          # Get the current repository name
          PRIVATE_REPO=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
          echo "private_repo=$PRIVATE_REPO" >> $GITHUB_OUTPUT
          
          # Get organization/username
          ORG=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          echo "org=$ORG" >> $GITHUB_OUTPUT
          
          # Determine public repository name
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.public_repo_name }}" ]]; then
            # Use the provided name from manual input
            PUBLIC_REPO="${{ github.event.inputs.public_repo_name }}"
          else
            # Auto-derive by removing "-private" suffix
            PUBLIC_REPO="${PRIVATE_REPO//-private/}"
          fi
          echo "public_repo=$PUBLIC_REPO" >> $GITHUB_OUTPUT
          
          echo "Private repository: $PRIVATE_REPO"
          echo "Public repository: $PUBLIC_REPO"
          echo "Organization: $ORG"

      - name: Get all branch names
        id: get-branches
        run: |
          # Get all branches and remove the refs/heads/ prefix
          BRANCHES=$(git branch -r | grep -v '\->' | sed 's/origin\///g' | tr '\n' ' ')
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT

      - name: Create workspace for public mirror
        run: |
          mkdir -p ~/public-mirror
          cd ~/public-mirror
          
          # Initialize empty git repository
          git init
          
          # Set Git identity in public repo directory
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          
          # Set up remote for the public mirror using SSH
          git remote add public git@github.com:${{ steps.repo-names.outputs.org }}/${{ steps.repo-names.outputs.public_repo }}.git
          
          # Check if public repo exists by attempting to connect to it
          if ! git ls-remote public HEAD &>/dev/null; then
            echo "Public repository doesn't exist or can't be accessed: ${{ steps.repo-names.outputs.org }}/${{ steps.repo-names.outputs.public_repo }}"
            echo "Ensure the repository exists and the SSH key has appropriate access."
            exit 1
          fi
          
          # Try to fetch from public repository
          git fetch public || echo "Could not fetch from public repository, but continuing anyway."

      - name: Create and update all branches
        run: |
          BRANCHES="${{ steps.get-branches.outputs.branches }}"
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # Process each branch
          for branch in $BRANCHES; do
            echo "Processing branch: $branch"
            
            # Checkout the branch from private repo
            git checkout $branch
            
            # Create temporary directory for the branch content
            rm -rf /tmp/repo-content
            mkdir -p /tmp/repo-content
            
            # Copy all files except .git directory
            rsync -av --exclude='.git' ./ /tmp/repo-content/
            
            # Switch to public mirror workspace
            cd ~/public-mirror
            
            # Try to checkout the branch if it exists in public mirror
            git checkout $branch 2>/dev/null || git checkout -b $branch
            
            # Remove all content except .git directory
            find . -mindepth 1 -not -path "./.git*" -delete
            
            # Copy content from private repo
            rsync -av /tmp/repo-content/ ./
            
            # Commit changes
            git add --all
            # Only commit if there are changes
            git diff --staged --quiet || git commit -m "Update from private repository"
            
            # Go back to the private repo directory
            cd $GITHUB_WORKSPACE
          done
          
          # Return to the original branch
          git checkout $CURRENT_BRANCH

      - name: Push all branches to public mirror
        run: |
          cd ~/public-mirror
          BRANCHES="${{ steps.get-branches.outputs.branches }}"
          
          # Push all branches to public mirror
          for branch in $BRANCHES; do
            git checkout $branch
            git push -u public $branch
          done
